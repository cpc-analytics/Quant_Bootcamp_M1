---
title: "Quant Bootcamp"
author: "Sahil Deo and Jayati Sharma"
format: 
  revealjs:
    embed-resources: true
    slide-number: c/t
    width: 1400
    theme: [serif, mytheme.css]

editor: visual
---

```{r setup}
#| eval: true
#| echo: false

library(countdown)
```

## About CPC{.scrollable}

::: incremental
+ Founded in 2014, CPC Analytics is a data-driven public policy consulting firm. It has offices in Berlin & Pune
+ Aims to bring together qualitative and quantitative research methods
+ CPC’s team of economists, social scientists, and software engineers support public sector organizations and businesses to undertake policy research and collect, analyze and visualize data
+ Select clients: WHO, GIZ, Save the Children, SIEMENS

www.cpc-analytics.com

:::

## A Little About You{.scrollable}

+ Your name
+ Your profession
+ Have you learnt any programming language/coded before?
+ Anything more you would like to share :)

## Why Quant Bootcamp?{.scrollable}

+ Need for social scientists with quantitative skills
+ Bridging the gap between qualitative and quantitative research
+ R as a programming language is efficient for data analysis

## Opening R{.scrollable}

+ This is what your RStudio screen looks like

![Source : [University of Melbourne](https://2953482177-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-M38c0s4s0YCM6dGwrz1%2F-M3_0fMRKDq8Uvu5TFRD%2F-M3_FZ86_WIA8-oRtkqy%2Fanatomy%20of%20rstudio.png?alt=media&token=5ae7472d-d64f-4f3c-a4f1-cd6b5d31cebd)](https://2953482177-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-M38c0s4s0YCM6dGwrz1%2F-M3_0fMRKDq8Uvu5TFRD%2F-M3_FZ86_WIA8-oRtkqy%2Fanatomy%20of%20rstudio.png?alt=media&token=5ae7472d-d64f-4f3c-a4f1-cd6b5d31cebd)

## Objects in R{.scrollable}

+ [The most common type of object in R is `vector`]{.fragment fragment-index="1"}

+ [Vectors can store all types of data: integers, characters, logical]{.fragment fragment-index="2"}

::: {.fragment fragment-index="3"}
```{r vector_integer}
#| eval: true
#| echo: true

id <- c(1,2,3,4,5)
id

id <- c(1:5)
id
```
:::

+ [Similarly, another vector with characters can be made]{.fragment fragment-index="4"}

::: {.fragment fragment-index="5"}
```{r vector_character}
#| eval: true
#| echo: true

name <- c("John", "Mary", "Cal", "Jess","Sam")
name
```
:::

## Objects in R{.scrollable}

+ [Factor object encodes a vector of unique elements into levels]{.fragment fragment-index="1"}

::: {.fragment fragment-index="2"}
```{r vector_factors}
#| eval: true
#| echo: true

score <- c("Very Bad", "Bad", "Neutral", "Good","Very Good")
print(factor(score))
```
:::

+ [Can you try making a vector called `age` with 5 values?]{.fragment fragment-index="3"}

::: {.fragment fragment-index="4"}
```{r vector_age}
#| eval: true
#| echo: true

age <- c(19, 21, 15, 25,23)
age
```
:::

## Objects in R{.scrollable}

+ Dataframes are tabular data objects
+ Each column in a dataframe is a vector
+ You can create a dataframe using the vectors you just created

```{r vector_dataframe}
#| eval: true
#| echo: true

dataframe1 <- data.frame(id, name, score, age)
dataframe1
```

## R Projects{.scrollable}
#### [Content for this topic has been sourced from [Danielle Navarro's workshop](https://djnavarro.net/chdss2018/day2/projects.html). Please check out her [work](https://djnavarro.net/chdss2018/) for detailed information.]{style="font-size:13px"}


**What?**

+ For organising files in a project
+ A tool to track your project

> In their own words, [RStudio](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents

**Why**

+ Although R keeps track of various different events that have happened but it has no idea which events are associated with  particular project

+ ***Convenience***
  - Keeps things tidy and smooths the process
+ ***Functionality***
  - An RStudio project creates a `.Rproj` file that links the different scripts, data sets, etc within a particular folder on your computer
  - Also makes it easier to share code with others

## R Projects{.scrollable}
#### [Content for this topic has been sourced from [Danielle Navarro's workshop](https://djnavarro.net/chdss2018/day2/projects.html). Please check out her [work](https://djnavarro.net/chdss2018/) for detailed information.]{style="font-size:13px"}

**How?**

::: panel-tabset

### 1. Create Project

Go to the the little blue menu in the top the top right corner in RStudio, click on the dropdown menu, and select 'New Project'

![](https://becker.wustl.edu/wp-content/uploads/Screen-Shot-2021-04-29-at-12.02.40-PM.png)

### 2. Select Directory

You can either:

+ Choose to open a project in a new directory
+ Or choose to work in an existing directory

![](https://www.rstudio.com/images/docs/projects_new.png)

### 3. Voilà!

Once you’ve created the project, if you have a look at the folder in Windows Explorer / Mac Finder in the respective directory, you’ll see your file!

![](https://djnavarro.net/chdss2018/day2/images/new_rstudio_project4.jpg)
:::

## Packages and Libraries{.scrollable}

::: columns
::: {.column width="60%"}

+ When using R, you will be writing functions to perform operations
+ Essentially, a package is a collection of functions
+ You need to install a package only once using `install.package`
+ However, you need to `load` it every session

:::

::: {.column width="40%"}
![Source: [Allison Horst](https://allisonhorst.com/allison-horst)](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b467ee99-87e3-4663-ae27-aaf027f940ce_rw_1920.png?h=0573cb8b960ba2f2c8486188761f03e0)

:::
:::

## Data Wrangling in R{.scrollable}

**What?**

+ While exploring your data, you would want to transform your data to understand the variables
+ This process of transforming and manipulating data is called data wrangling

**Why?**

+ Because you almost never will get data that is not in the format you want it in: you need to modify the variables, delete, add new etc
+ To do exploratory analysis, you need to understand how to transform variables

## Data Wrangling in R{.scrollable}

**How?**

+ The `dplyr` package consists of many functions that help with data manipulation

```{r dplyr_load}
#| eval: true
#| echo: true

## loading libraries
library(dplyr) #for data manipulation
library(ISLR2) #for dataset
```

## Loading your dataset{.scrollable}

+ We will use the `Carseats` dataset for this topic

```{r dplyr_load_dataset}
#| eval: true
#| echo: true

ISLR2::Carseats
```

## Viewing your dataset{.scrollable}

```{r dplyr_view}
#| eval: true
#| echo: true

Carseats <- ISLR2::Carseats

head(Carseats) #see first 6 obervations
tail(Carseats) #see last 6 observations
```

## Viewing a variable{.scrollable}

+ You can also view a particular variable using

```{r variable_view}
#| eval: true
#| echo: true

Carseats$Urban
```

## Select Your Variables{.scrollable}

**Task** - You want to select certain variables from your `Carseats` dataset

**Solution** - `select()` function 

+ You can select any variable you want by specifying

```{r dplyr_select}
#| eval: true
#| echo: true

select(Carseats, Sales, CompPrice, Price, Population)
```

+ Alternatively, you can select what you **do not** want

```{r dplyr_select1}
#| eval: true
#| echo: true

select(Carseats, -US, -Sales, -Population)
```

+ Moreover, you can select by type of variable

```{r dplyr_select2}
#| eval: true
#| echo: true

select(Carseats, where(is.numeric))
```

## Hold Up...

::: incremental

+ How are the results of your functions stored?
+ You see them in the console, but they are not saved to the dataframe
+ To save your changes as a dataframe, either existing one or new one, you can specify the name

::: incremental
```{r dplyr_save2}
#| eval: true
#| echo: true

carseats_selected <- select(Carseats, where(is.numeric))
```
:::
:::

## Rename Your Variable{.scrollable}

**Task** - You want to rename certain variables from your `Carseats` dataset

**Solution** - `rename`()` function

+ Suppose you want to rename `CompPrice` and `ShelveLoc` variables

```{r dplyr_rename}
#| eval: true
#| echo: true

rename(Carseats, competitor_price = CompPrice, shelving_location = ShelveLoc)
```

## Arrange Your Variable{.scrollable}

**Task** - You want to arrange some variables from `Carseats` dataset

**Solution** - `arrange`()` function

+ Suppose you want to arrange the `Price` variable in ascending order

```{r dplyr_arrange}
#| eval: true
#| echo: true

arrange(Carseats, Price)
```

+ But what if you wanted to arrange it in descending order?

```{r dplyr_arrange2}
#| eval: true
#| echo: true

arrange(Carseats, -Price)
```

## Create a New Variable{.scrollable}

**Task** - You want to create a new variable from some existing variable some from `Carseats` dataset

**Solution** - `mutate`()` function

+ Suppose you want to want to find per capita income of a region (income/total population)

```{r dplyr_mutate}
#| eval: true
#| echo: true

mutate(Carseats, per_capita_income = ((Income*1000)/Population))
```

## Filter your data{.scrollable}

**Task** - You want to filter parts of your data that meet some criteriafrom `Carseats` dataset

**Solution** - `filter`()` function

+ Let us take a look at the different types of filters

::: panel-tabset

### More than filter

+ Filtering cases where `Price` is more than or equal to 120

```{r dplyr_filter1}
#| eval: true
#| echo: true

filter(Carseats, Price >= 120)
```

### Less than filter

+ Filtering cases where `Sales` is more less than or equal to 8

```{r dplyr_filter2}
#| eval: true
#| echo: true

filter(Carseats, Sales <= 8)
```

### AND filter

+ How about we combine both these conditions?

```{r dplyr_filter3}
#| eval: true
#| echo: true

filter(Carseats, Price >= 120 & Sales <= 8)
```

:::

## Filter your data{.scrollable}

::: panel-tabset

### OR filter

+ Or how about wanting to filter data on either one of these conditions?

```{r dplyr_filter4}
#| eval: true
#| echo: true

filter(Carseats, Price >= 120 | Sales <= 8)
```

### Equal to filter

+ What if you want to filter data when variables are equal to some criteria?

```{r dplyr_filter5}
#| eval: true
#| echo: true

filter(Carseats, Price == 100)
```

### Not equal to filter

+ What if you want to filter data when variables are **not** equal to some criteria?

```{r dplyr_filter6}
#| eval: true
#| echo: true

filter(Carseats, Price != 100)
```
:::

## Your Turn!{.scrollable}

+ Load the `Credit` data from `ISLR2` package
+ Select only the variables `Income`, `Rating`, `Balance`, `Limit` and `Cards` from `Credit` dataset and save the results as a new dataframe called `Credit_selected`
+ In `Credit_selected`, arrange the dataset in descending order of `Income` and save this as `Credit_arranged`
+ Next, rename `Rating` as `Credit_Rating` and save as `Credit_renamed`
+ From `Credit_renamed`, create two new variable such that"
  - `Balance_Card` by dividing the `Balance` by `Cards` from `Credit_renamed`
  - `Remaining` by subtracting `Income` from `Limit`
Save the results as `Credit_mutate`
+ From `Credit_mutate`, filter observations where `Limit` is between 5,000 to 10,000

## Let's Make Things Easier!

+ You need to update and make a new dataframe everytime you want to make changes
+ Tiring, right?
+ Fortunately, we have "pipe"
+ Written as `%>%` or `|>`
+ Depends on a stepwise logic
+ Also reduces possibility of any error

## Pipe Operator

::: columns
::: {.column width="50%"}

Without Pipe

```{r without_pipe}
#| eval: false
#| echo: true

Credit_selected <- select(
  Credit, Income, Rating, Balance, Cards, Limit
  )
Credit_arranged <- arrange(
  Credit_selected, -Income
  )
Credit_renamed <- rename(
  Credit_arranged, "Credit_Rating" = "Rating"
  )
Credit_mutate <- mutate(
  Credit_renamed, "Balance_Card" = Balance/Cards, 
                        "Remaining" = Limit - Income
  )

Credit_filter <- filter(
  Credit_mutate, Limit>= 5000 & Limit <= 10000
  )
```

:::

::: {.column width="50%"}

With Pipe

```{r with_pipe}
#| eval: false
#| echo: true

Credit |>
  select(
    Income, Rating, Balance, Cards, Limit) |>
  arrange(-Income) |>
  rename(
    "Credit_Rating" = "Rating") |>
  mutate("Balance_Card" = Balance/Cards, 
        "Remaining" = Limit - Income) |>
  filter(
    Limit>= 5000 & Limit <= 10000)

```
:::
:::

## Group By and Summarise{.scrollable}

**Task** - You want to find the mean amount of sales based on the shelving location from `Carseats` dataset

**Solution** - `group_by()` and `summarise()` function

```{r}
#| eval: true
#| echo: true

Carseats |>
  group_by(ShelveLoc) |>
  summarise(sales_location = mean(Sales))
```

## Thank You :){.center}